import 'package:flutter/material.dart';

import './helper/memoDbProvider.dart';
import './model/memoModel.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.blue,
        // This makes the visual density adapt to the platform that you run
        // the app on. For desktop platforms, the controls will be smaller and
        // closer together (more dense) than on mobile platforms.
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;
  MemoDbProvider memoDb = MemoDbProvider();
  List<MemoModel> memos;
  int _memosLength;
  @override
  void initState() {
    super.initState();
    updateScreenMemos();
  }

//  void methoda() async {
////    List<MemoModel> memos = await memoDb.fetchMemos();
////    print(memos.runtimeType);
////    print(memos);
////    print(memos[0].title);
//
//    List<MemoModel> updatedMemos = await memoDb.fetchMemos();
//    print(updatedMemos);
//    print(updatedMemos[0].title);
//  }

  void updateScreenMemos() async {
    List<MemoModel> responseDB = await memoDb.fetchMemos();
    print(responseDB.length);
    setState(() {
      _memosLength = responseDB.length;
      memos = responseDB;
    });
  }

  void _addedMemo() async {
    _counter++;
    final MemoModel memo = MemoModel(id: _counter, title: 'Title $_counter', content: 'Note $_counter');
    await memoDb.addItem(memo);
    updateScreenMemos();
  }

  void _updatedMemo() async {
    final updateMemo = MemoModel(id: _counter, title: 'Title changed $_counter', content: 'Note $_counter');
    await memoDb.updateMemos(_counter, updateMemo);
    updateScreenMemos();
  }

  void _deleteLastMemo() async {
    await memoDb.deleteMemo(_counter);
    _counter--;
    updateScreenMemos();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'You have pushed the button this many times: $_counter',
            ),
            _memosLength > 0
                ? Text(
                    '$memos',
                    style: Theme.of(context).textTheme.headline6,
                  )
                : Text(
                    'No items',
                    style: Theme.of(context).textTheme.headline6,
                  ),
            FlatButton(
              onPressed: () {
                updateScreenMemos();
              },
              child: Text('Get list from DB SQLite'),
            ),
            FlatButton(
              onPressed: () {
                _updatedMemo();
              },
              child: Text('Updated item to DB'),
            ),
            FlatButton(
              onPressed: () {
                _deleteLastMemo();
              },
              child: Text('Deleted last item to DB'),
            ),
//            memos == null
//                ? Center(child: const Text('No items'))
//                : ListView.builder(
////                    itemCount: memos.length,
//                    itemBuilder: (BuildContext context, int index) {
//                    return Container(
//                      height: 50,
//                      child: Center(
//                        child: Text(
//                          'Entry ${memos[index]}',
//                          style: TextStyle(
//                            fontSize: 1,
//                          ),
//                        ),
//                      ),
//                    );
//                  }),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _addedMemo,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
